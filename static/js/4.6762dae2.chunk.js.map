{"version":3,"sources":["utils/validator/validators.ts","components/Common/FormsStyles/FormControls.tsx","HOC/WithAuthRedirect.tsx","components/Content/Profile/Profile.module.css","components/Content/Profile/Post/PostList/PostItem/PostItem.tsx","components/Content/Profile/Post/PostList/PostList.tsx","components/Content/Profile/Post/PostCreateForm/PostForm/PostForm.tsx","components/Content/Profile/Post/PostCreateForm/PostCreate.tsx","components/Content/Profile/Post/Post.tsx","components/Content/Profile/ProfileInfo/ProfileStatus/ProfileStatusHOOKS.tsx","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","components/Content/Profile/Profile.tsx","components/Content/Profile/ProfileContainer.tsx"],"names":["requeiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","Input","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","connect","restProps","to","module","exports","PostItem","src","logo","alt","login","text","likes","PostList","postItems","posts","map","elem","name","post","id","maxLength10","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","CreatePost","formData","newPost","addPost","Post","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","updateStatus","onChange","e","currentTarget","autoFocus","onClick","isOwner","ProfileInfo","item","profile","profileInfo","Preloader","contactsArr","key","contacts","push","c","Math","floor","random","photos","small","htmlFor","type","target","files","savePhoto","fullName","lookingForAJob","lookingForAJobDescription","Profile","Pro","ProfileContainer","this","setProfileInfo","match","params","userId","getProfileStatus","refreshProfile","prevProps","prevState","updateProfileStatus","React","compose","profileData","postUsers","setProfileInfoThunkCreator","getProfileStatusThunkCreator","updateProfileStatusThunkCreator","profileActions","addPostActionCreator","savePhotoThunkCreator","withRouter"],"mappings":"kIAEA,oEAAO,IAAMA,EAAyC,SAACC,GACnD,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA+C,SAACF,GAC5E,GAAIA,EACA,OAAIA,EAAMG,OAASD,EACT,iBAAN,OAAwBA,QAE5B,K,+KCXKE,EAAwC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,iBACxEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAcH,EAAW,qBAAuB,eAArD,UACI,oDAAcH,GAAWE,IACvBC,GAAY,sBAAMG,UAAa,gBAAnB,SAAsCL,EAAKI,YAIxDE,EAAqC,SAAC,GAA6B,IAA5BP,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,iBACrEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAcH,EAAW,qBAAuB,eAArD,UACI,iDAAWH,GAAWE,IACpBC,GAAY,sBAAMG,UAAa,gBAAnB,SAAsCL,EAAKI,a,iICZjEG,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAKhB,SAASE,EAAuBC,GAYnC,OAFqCC,YAAkDN,EAAlDM,EARkB,SAACZ,GACpD,IAAKQ,EAAwBR,EAAxBQ,OAAWK,EAAhB,YAA6Bb,EAA7B,GACA,OAAKQ,EAGE,cAACG,EAAD,eAAeE,IAFX,cAAC,IAAD,CAAUC,GAAG,wB,kICfhCC,EAAOC,QAAU,CAAC,QAAU,2B,yJCiBbC,EAd+B,SAACjB,GAE3C,OACI,sBAAKI,UAAU,iCAAf,UACI,qBAAKc,IAAKC,IAAMC,IAAI,OAAOhB,UAAU,kCACrC,oBAAIA,UAAU,mBAAd,SAAkCJ,EAAMqB,QACxC,mBAAGjB,UAAU,kBAAb,SAAgCJ,EAAMsB,OACtC,sBAAKlB,UAAY,oBAAjB,UACG,mBAAGA,UAAY,yBAAf,SAAyCJ,EAAMuB,QAC/C,sBAAMnB,UAAY,WAAlB,2BCIAoB,G,OAb+B,SAACxB,GAE3C,IAEMyB,EAFYzB,EAAM0B,MAEIC,KAAI,SAAAC,GAC5B,OAAO,cAAC,EAAD,CAAUP,MAAOO,EAAKC,KAAMP,KAAQM,EAAKE,KAAMP,MAASK,EAAKL,OAAcK,EAAKG,OAE3F,OACI,qBAAK3B,UAAU,+BAAf,SACKqB,M,6DCPPO,G,OAActC,YAAiB,KAYxBuC,EAAgBC,YAA6B,CAACC,KAAM,QAApCD,EAVoC,SAAClC,GAE9D,OACI,uBAAMI,UAAU,cAAcgC,SAAYpC,EAAMqC,aAAhD,UACI,cAACC,EAAA,EAAD,CAAOlC,UAAU,aAAamC,UAAa1C,IAAUgC,KAAQ,UAAWW,SAAY,CAAChD,IAAgBwC,KACrG,wBAAQ5B,UAAU,qBAAlB,wBCMGqC,EAdmC,SAACzC,GAQ/C,OACI,qBAAKI,UAAU,cAAf,SACI,cAAC6B,EAAD,CAAeG,SARN,SAACM,GACVA,EAASC,SACT3C,EAAM4C,QAAQF,EAASC,eCMpBE,EAViD,SAAC7C,GAE7D,OACI,sBAAKI,UAAU,qBAAf,UACI,oBAAIA,UAAU,cAAd,sBACA,cAAC,EAAD,CAAYwC,QAAW5C,EAAM4C,UAC7B,cAAC,EAAD,CAAUlB,MAAS1B,EAAM0B,Y,2CCyBtBoB,G,OAhC8C,SAAC9C,GAE1D,MAA8B+C,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAAS/C,EAAMkD,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAW,WACPD,EAAUnD,EAAMkD,UACjB,CAAClD,EAAMkD,SAgBV,OACI,qBAAK9C,UAAU,wBAAf,SACK4C,EACK,uBAAOK,OAXM,WACvBJ,GAAY,GACZjD,EAAMsD,aAAaJ,IAS4BK,SAP9B,SAACC,GAClBL,EAAUK,EAAEC,cAAchE,QAM+CA,MAASyD,EAAQQ,WAAW,EAAMtD,UAAU,2BAC3G,oBAAIuD,QAlBO,WAChB3D,EAAM4D,SACRX,GAAY,IAgB4B7C,UAAU,wBAA3C,SAAqEJ,EAAMkD,OAASlD,EAAMkD,OAAS,gBCyBtGW,EAjDqC,SAAC7D,GAEjD,IAMI8D,EANEC,EAAU/D,EAAMgE,YAEtB,IAAKD,EACD,OAAO,cAACE,EAAA,EAAD,IAIX,IAAIC,EAAc,GAClB,IAAK,IAAIC,KAAOJ,EAAQK,SACU,OAA1BL,EAAQK,SAASD,IAA2C,KAA1BJ,EAAQK,SAASD,KACnDL,EAAOK,EAAM,KAAOJ,EAAQK,SAASD,GACrCD,EAAYG,KAAKP,IAGzB,IAAIM,EAAWF,EAAYvC,KAAI,SAAA2C,GAC3B,OAAO,oBAAIlE,UAAU,sBAAd,SAA4EkE,GAAnCC,KAAKC,MAAsB,IAAhBD,KAAKE,cASpE,OACI,sBAAKrE,UAAU,eAAf,UACI,sBAAKA,UAAa,uBAAlB,UACI,qBAAKc,IAAK6C,EAAQW,OAAOC,MAAQZ,EAAQW,OAAOC,MAAQxD,IAAMC,IAAI,OAAOhB,UAAU,iCACjFJ,EAAM4D,SACJ,sBAAKxD,UAAW,gBAAhB,UACI,uBAAOwE,QAAW,OAAQxE,UAAW,yBAArC,8BACA,uBAAOyE,KAAM,OAAQzE,UAAW,uBAAwBmD,SAbvD,SAACC,GAAsC,IAAD,GACvD,UAAGA,EAAEsB,OAAOC,aAAZ,aAAG,EAAgBnF,SACfI,EAAMgF,UAAUxB,EAAEsB,OAAOC,MAAM,KAW6DhD,GAAM,eAIlG,sBAAK3B,UAAU,8BAAf,UACI,oBAAIA,UAAU,sBAAd,SAA4E2D,EAAQkB,UAAzCV,KAAKC,MAAoB,IAAdD,KAAKE,WAC3D,cAAC,EAAD,CAAoBb,QAAW5D,EAAM4D,QAASV,OAASlD,EAAMkD,OAAQI,aAAgBtD,EAAMsD,eAC3F,oBAAIlD,UAAU,sBAAd,SAA4E2D,EAAQmB,eAAiB,yBAA2B,gBAArFX,KAAKC,MAAoB,IAAdD,KAAKE,WAC3D,oBAAIrE,UAAU,sBAAd,SAA4E2D,EAAQoB,2BAA6BpB,EAAQoB,2BAA9EZ,KAAKC,MAAoB,IAAdD,KAAKE,WAC3D,qBAAKrE,UAAY,+BAAjB,SACIgE,WCnCLgB,EAV6B,SAACpF,GAEzC,OACI,sBAAKI,UAAWiF,IAAItB,QAApB,UACI,cAAC,EAAD,CAAaC,YAAehE,EAAMgE,YAAaV,aAAgBtD,EAAMsD,aAAcJ,OAAUlD,EAAMkD,OAAQ8B,UAAahF,EAAMgF,UAAWpB,QAAW5D,EAAM4D,UAC1J,cAAC,EAAD,CAAOhB,QAAW5C,EAAM4C,QAASlB,MAAS1B,EAAM0B,Y,wCCCtD4D,E,oKAEF,WACIC,KAAKvF,MAAMwF,gBAAgBD,KAAKvF,MAAMyF,MAAMC,OAAOC,OAAQJ,KAAKvF,MAAMS,KAAKkF,QAC3EJ,KAAKvF,MAAM4F,kBAAkBL,KAAKvF,MAAMyF,MAAMC,OAAOC,OAAQJ,KAAKvF,MAAMS,KAAKkF,U,+BAEjF,WACIJ,KAAKM,mB,gCAET,SAAmBC,EAAsCC,GACjDR,KAAKvF,MAAMyF,MAAMC,OAAOC,SAAWG,EAAUL,MAAMC,OAAOC,QAC1DJ,KAAKM,mB,oBAIb,WACI,OACI,8BACI,cAAC,EAAD,CACI7B,YAAauB,KAAKvF,MAAMgE,YACxBd,OAAQqC,KAAKvF,MAAMkD,OACnBI,aAAciC,KAAKvF,MAAMgG,oBACzBtE,MAAS6D,KAAKvF,MAAM0B,MACpBkB,QAAW2C,KAAKvF,MAAM4C,QACtBgB,QAAW2B,KAAKvF,MAAMyF,MAAMC,OAAOC,OACnCX,UAAaO,KAAKvF,MAAMgF,kB,GAzBbiB,IAAMtF,WAuCtBuF,sBACXtF,aARkB,SAACL,GAAD,MAAoD,CACtEyD,YAAazD,EAAM4F,YAAYnC,YAC/BvD,KAAMF,EAAME,KACZyC,OAAQ3C,EAAM4F,YAAYjD,OAC1BxB,MAAOnB,EAAM4F,YAAYC,aAIA,CAACZ,eAAgBa,IACtCT,iBAAkBU,IAClBN,oBAAqBO,IACrB3D,QAAS4D,IAAeC,qBACxBzB,UAAW0B,MAEfC,IACAjG,IARWwF,CAQQZ","file":"static/js/4.6762dae2.chunk.js","sourcesContent":["export type ValidatorsRequiredType = (value: string) => string | undefined\r\n\r\nexport const requeiredField: ValidatorsRequiredType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsRequiredType => (value: string) => {   \r\n    if (value) {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength}`\r\n        }\r\n        return undefined\r\n    } \r\n}","import { WrappedFieldProps } from 'redux-form'\r\nimport './FormControls.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <textarea {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <input {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { AppStateType } from \"../redux/redux-store\"\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype WithAuthPropsType = {isAuth: boolean}\r\n\r\nexport function WithAuthRedirect<WCP> (Component: React.ComponentType<WCP>) { \r\n\r\n    const RedirectComponent: React.FC<WithAuthPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to='/Content/Login' />\r\n        }\r\n        return <Component {...restProps as unknown as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<WithAuthPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2D5ez\"};","import logo from '../../../../../../Rlogo.png'\r\nimport { PostItemPropsType } from '../../../../../../types/ProfileTypes/ProfileTypesComponent';\r\nimport './PostItem.css'\r\n\r\nconst PostItem: React.FC<PostItemPropsType> = (props) => {\r\n\r\n    return (\r\n        <div className=\"item-post post-list__item-post\">\r\n            <img src={logo} alt=\"logo\" className=\"logo avatar item-post__avatar\" />\r\n            <h4 className=\"item-post__login\">{props.login}</h4>\r\n            <p className=\"item-post__text\">{props.text}</p>\r\n            <div className = \"item-post__action\">\r\n               <p className = \"item-post__likes-count\">{props.likes}</p>\r\n               <span className = \"like-img\">&#9829;</span> \r\n            </div>     \r\n        </div>\r\n    );\r\n}\r\nexport default PostItem","import { PostListPropsType } from '../../../../../types/ProfileTypes/ProfileTypesComponent';\r\nimport PostItem from './PostItem/PostItem';\r\nimport './PostList.css'\r\n\r\nconst PostList: React.FC<PostListPropsType> = (props) => {\r\n    \r\n    const postUsers = props.posts\r\n    \r\n    const postItems = postUsers.map(elem => {\r\n        return <PostItem login={elem.name} text = {elem.post} likes = {elem.likes} key = {elem.id}/>\r\n    })\r\n    return (\r\n        <div className=\"post-list profile__post-list\">\r\n            {postItems}\r\n        </div>\r\n    );\r\n}\r\nexport default PostList","import { Field, InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { PostFormPropsType } from \"../../../../../../types/ProfileTypes/ProfileTypesComponent\"\r\nimport { maxLengthCreator, requeiredField } from \"../../../../../../utils/validator/validators\"\r\nimport { Textarea } from \"../../../../../Common/FormsStyles/FormControls\"\r\nimport './PostForm.css'\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst PostForm: React.FC<InjectedFormProps<PostFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <form className=\"create-post\" onSubmit = {props.handleSubmit} >\r\n            <Field className=\"input-post\" component = {Textarea} name = {'newPost'} validate = {[requeiredField, maxLength10]} />\r\n            <button className=\"btn-send post__btn\" >Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const PostReduxForm = reduxForm<PostFormPropsType>({form: 'post'}) (PostForm)\r\n","import './PostCreate.css'\r\nimport React from 'react'\r\nimport { PostReduxForm } from './PostForm/PostForm'\r\nimport { PostCreatePropsType, PostFormPropsType } from '../../../../../types/ProfileTypes/ProfileTypesComponent'\r\n\r\nconst CreatePost: React.FC<PostCreatePropsType> = (props) => {\r\n\r\n    const onSubmit = (formData: PostFormPropsType) => {     \r\n        if (formData.newPost) {\r\n            props.addPost(formData.newPost)  \r\n        }   \r\n    }\r\n    \r\n    return (\r\n        <div className=\"create-post\">\r\n            <PostReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\nexport default CreatePost","import './Post.css'\r\nimport PostList from './PostList/PostList';\r\nimport CreatePost from './PostCreateForm/PostCreate';\r\nimport { PostCreatePropsType, PostListPropsType } from '../../../../types/ProfileTypes/ProfileTypesComponent';\r\n\r\nconst Post: React.FC<PostListPropsType & PostCreatePropsType> = (props) => {\r\n    \r\n    return (\r\n        <div className=\"post profile__post\">\r\n            <h3 className=\"post__title\">My posts</h3>\r\n            <CreatePost addPost = {props.addPost} /> \r\n            <PostList posts = {props.posts}/>        \r\n        </div>\r\n    );\r\n}\r\nexport default Post","import React, { ChangeEvent, useEffect, useState } from \"react\"\r\nimport { ProfileStatusPropsType } from \"../../../../../types/ProfileTypes/ProfileTypesComponent\"\r\nimport './ProfileStatus.css'\r\n\r\nconst ProfileStatusHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => { \r\n        if (!props.isOwner) {\r\n           setEditMode(true) \r\n        }    \r\n    }\r\n    \r\n    const deActivateEditMode = () => { \r\n        setEditMode(false)\r\n        props.updateStatus(status) \r\n    }\r\n    const updateStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className='personal-info__status'>\r\n            {editMode\r\n                ? <input onBlur = {deActivateEditMode} onChange = {updateStatus} value = {status} autoFocus={true} className='profile-status__create' />\r\n                : <h3 onClick = {activateEditMode} className='profile-status__title' >{props.status ? props.status : 'Status '}</h3>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusHooks","import { ChangeEvent } from 'react'\r\nimport logo from '../../../../Rlogo.png'\r\nimport { ProfileInfoPropsType } from '../../../../types/ProfileTypes/ProfileTypesComponent'\r\nimport Preloader from '../../../Common/Preloader/Preloader'\r\nimport './ProfileInfo.css'\r\nimport ProfileStatusHooks from './ProfileStatus/ProfileStatusHOOKS'\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n    \r\n    const profile = props.profileInfo\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n \r\n    let item\r\n    let contactsArr = []\r\n    for (let key in profile.contacts) {\r\n        if (profile.contacts[key] !== null && profile.contacts[key] !== '') {\r\n            item = key + ': ' + profile.contacts[key]\r\n            contactsArr.push(item)\r\n        }     \r\n    }\r\n    let contacts = contactsArr.map(c => {\r\n        return <h3 className=\"personal-info__item\" key={Math.floor(Math.random() * 1000)}>{c}</h3>\r\n    })\r\n    \r\n    const changeAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='profile-info'>\r\n            <div className = {'profile-info__avatar'}>\r\n                <img src={profile.photos.small ? profile.photos.small : logo} alt=\"logo\" className=\"logo avatar profile__avatar\" />\r\n                {!props.isOwner && (\r\n                    <div className={'change-avatar'}>\r\n                        <label htmlFor = {'file'} className={'change-avatar__element'}>Change The Photo</label>\r\n                        <input type={'file'} className={'change-avatar__input'} onChange={changeAvatar} id = {'file'} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className=\"personal-info profile__info\">\r\n                <h3 className=\"personal-info__item\" key = {Math.floor(Math.random()*1000)}>{profile.fullName}</h3>\r\n                <ProfileStatusHooks isOwner = {props.isOwner} status ={props.status} updateStatus = {props.updateStatus} />\r\n                <h3 className=\"personal-info__item\" key = {Math.floor(Math.random()*1000)}>{profile.lookingForAJob ? 'I am looking for a job' : 'I have a job'}</h3>\r\n                <h3 className=\"personal-info__item\" key = {Math.floor(Math.random()*1000)}>{profile.lookingForAJobDescription && profile.lookingForAJobDescription }</h3>\r\n                <div className = 'personal-info__item-contacts'>\r\n                   {contacts}    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import { ProfilePropsType } from '../../../types/ProfileTypes/ProfileTypesComponent';\r\nimport Post from './Post/Post';\r\nimport Pro from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => { \r\n    \r\n    return (\r\n        <div className={Pro.profile}>\r\n            <ProfileInfo profileInfo = {props.profileInfo} updateStatus = {props.updateStatus} status = {props.status} savePhoto = {props.savePhoto} isOwner = {props.isOwner} />\r\n            <Post  addPost = {props.addPost} posts = {props.posts} />    \r\n        </div>   \r\n    );   \r\n}\r\n\r\nexport default Profile","import Profile from \"./Profile\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getProfileStatusThunkCreator, profileActions, savePhotoThunkCreator, setProfileInfoThunkCreator, updateProfileStatusThunkCreator } from \"../../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router\";\r\nimport { WithAuthRedirect } from \"../../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { ProfileContainerPropsType, ProfileMapStatePropsType } from \"../../../types/ProfileTypes/ProfileTypesComponent\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {        \r\n        this.props.setProfileInfo(+this.props.match.params.userId, this.props.auth.userId as number)\r\n        this.props.getProfileStatus(+this.props.match.params.userId, this.props.auth.userId as number)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: ProfileContainerPropsType, prevState: ProfileContainerPropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }    \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    profileInfo={this.props.profileInfo}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateProfileStatus}\r\n                    posts = {this.props.posts}\r\n                    addPost = {this.props.addPost}\r\n                    isOwner = {this.props.match.params.userId}\r\n                    savePhoto = {this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): ProfileMapStatePropsType => ({    \r\n    profileInfo: state.profileData.profileInfo,\r\n    auth: state.auth,\r\n    status: state.profileData.status,\r\n    posts: state.profileData.postUsers\r\n})\r\n\r\nexport default compose<React.ComponentType> (\r\n    connect(mapStateToProps, {setProfileInfo: setProfileInfoThunkCreator, \r\n        getProfileStatus: getProfileStatusThunkCreator, \r\n        updateProfileStatus: updateProfileStatusThunkCreator,\r\n        addPost: profileActions.addPostActionCreator,\r\n        savePhoto: savePhotoThunkCreator\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect) (ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer) \r\n\r\n// let UrlDataContainer = withRouter(AuthRedirectComponent)\r\n\r\n// export default connect(mapStateToProps, {setProfileInfo: setProfileInfoThunkCreator}) (UrlDataContainer)"],"sourceRoot":""}