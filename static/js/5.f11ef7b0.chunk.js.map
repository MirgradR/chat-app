{"version":3,"sources":["utils/validator/validators.ts","components/Common/FormsStyles/FormControls.tsx","HOC/WithAuthRedirect.tsx","components/Content/Messages/Chat/ChatForm/ChatForm.tsx","components/Content/Messages/Chat/ChatSMS/ChatSMS.tsx","components/Content/Messages/Chat/Chat.tsx","components/Content/Messages/Dialogs/DialogsList/DialogsItem/DialogsItem.tsx","components/Content/Messages/Dialogs/DialogsList/DialogsList.tsx","components/Content/Messages/Dialogs/Dialogs.tsx","components/Content/Messages/Messages.tsx","components/Content/Messages/MessagesContainer.tsx"],"names":["requeiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","Input","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","connect","restProps","to","maxLength50","ChatReduxForm","reduxForm","form","reset","handleSubmit","onSubmit","Field","component","name","validate","ChatSMS","src","ava","alt","user","text","Chat","chatItems","chatSMS","map","elem","id","FormData","newMessage","addMessage","DialogsItem","users","idU","DialogsList","dialogItems","Dialogs","Messages","usersList","compose","messagesData","messagesActions","addMessageActionCreator"],"mappings":"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","file":"static/js/5.f11ef7b0.chunk.js","sourcesContent":["export type ValidatorsRequiredType = (value: string) => string | undefined\r\n\r\nexport const requeiredField: ValidatorsRequiredType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsRequiredType => (value: string) => {   \r\n    if (value) {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength}`\r\n        }\r\n        return undefined\r\n    } \r\n}","import { WrappedFieldProps } from 'redux-form'\r\nimport './FormControls.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <textarea {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <input {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { AppStateType } from \"../redux/redux-store\"\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype WithAuthPropsType = {isAuth: boolean}\r\n\r\nexport function WithAuthRedirect<WCP> (Component: React.ComponentType<WCP>) { \r\n\r\n    const RedirectComponent: React.FC<WithAuthPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to='/Content/Login' />\r\n        }\r\n        return <Component {...restProps as unknown as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<WithAuthPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from \"react\"\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { maxLengthCreator, requeiredField } from \"../../../../../utils/validator/validators\"\r\nimport { Textarea } from \"../../../../Common/FormsStyles/FormControls\"\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst ChatForm: React.FC<InjectedFormProps<{ newMessage: string }>> = ({reset, handleSubmit}) => {\r\n\r\n    //reset()\r\n    return (\r\n        <form onSubmit = {handleSubmit} >\r\n            <Field className=\"input-message\" component = {Textarea} name = {'newMessage'} validate = {[requeiredField, maxLength50]}  />\r\n            <button className=\"btn-send message__btn\">Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ChatReduxForm = reduxForm<{ newMessage: string }>({form: 'chat'}) (ChatForm)\r\n","import './ChatSMS.css'\r\nimport ava from '../../../../../Rlogo.png'\r\nimport { ChatSMSPropsType } from '../../../../../types/MessagesTypes/MessagesTypesComponent';\r\n\r\nconst ChatSMS: React.FC<ChatSMSPropsType> = (props) => {\r\n    return (\r\n        <li className = \"chat-message\">\r\n            <img src = {ava} alt = {ava} className = \"avatar logo chat-message__avatar\"/>\r\n            <h3 className = \"chat-message__login\">{props.user}</h3>\r\n            <p className = \"chat-message__text\">{props.text}</p>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ChatSMS","import React from 'react';\r\nimport { ChatPropsType } from '../../../../types/MessagesTypes/MessagesTypesComponent';\r\nimport './Chat.css'\r\nimport { ChatReduxForm } from './ChatForm/ChatForm';\r\nimport ChatSMS from './ChatSMS/ChatSMS';\r\n\r\nconst Chat: React.FC<ChatPropsType> = (props) => {\r\n\r\n    const addMessage = (FormData: { newMessage: string }) => {\r\n        if (FormData.newMessage) {\r\n            props.addMessage(FormData.newMessage)\r\n        }       \r\n    }\r\n\r\n    const chatItems = props.chatSMS.map(elem => {\r\n        return <ChatSMS user = {'Ruslan'}  text = {elem.text} key = {elem.id}/>    \r\n    })\r\n    return (\r\n        <div className = \"chat messages__chat\">\r\n            {chatItems}\r\n            <div className = \"chat__create-message\">\r\n                <ChatReduxForm onSubmit = {addMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Chat","import './DialogsItem.css'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsItemPropsType } from '../../../../../../types/MessagesTypes/MessagesTypesComponent';\r\n\r\nconst DialogsItem: React.FC<DialogsItemPropsType> = (props) => {\r\n    const users = props.user\r\n    const id = props.idU\r\n    return (\r\n        <NavLink to = {\"/Content/Messages/\" + id} className = \"dialogs-list__item\">{users}</NavLink>\r\n    );\r\n}\r\nexport default DialogsItem","import { DialogsPropsType } from '../../../../../types/MessagesTypes/MessagesTypesComponent';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport './DialogsList.css'\r\n\r\nconst DialogsList: React.FC<DialogsPropsType> = (props) => {\r\n    const user = props.users\r\n    const dialogItems = user.map(elem => {\r\n        return <DialogsItem user = {elem.name} idU = {elem.id} key = {elem.id}/>\r\n    })\r\n    return (\r\n        <ul className=\"dialogs-list\">\r\n            {dialogItems}\r\n        </ul>\r\n    );\r\n}\r\nexport default DialogsList","import { DialogsPropsType } from '../../../../types/MessagesTypes/MessagesTypesComponent';\r\nimport './Dialogs.css'\r\nimport DialogsList from './DialogsList/DialogsList';\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {  \r\n    return (\r\n        <div className=\"dialogs messages__dialogs\">\r\n            <h2 className = \"dialogs-title\">Dialogs</h2>\r\n            <DialogsList users = {props.users}/>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs","import { MessagesPropsType } from '../../../types/MessagesTypes/MessagesTypesComponent';\r\nimport Chat from './Chat/Chat';\r\nimport Dialogs from './Dialogs/Dialogs';\r\nimport './Messages.css'\r\n\r\nconst Messages: React.FC<MessagesPropsType> = (props) => {\r\n    \r\n    return (\r\n        <div className = \"messages content__messages\">\r\n            <Dialogs users = {props.usersList}/>\r\n            <Chat chatSMS = {props.chatSMS} addMessage = {props.addMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { WithAuthRedirect } from '../../../HOC/WithAuthRedirect';\r\nimport { messagesActions } from '../../../redux/messages-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { MessagesContainerPropsType, MessagesContainerStatePropsType } from '../../../types/MessagesTypes/MessagesTypesComponent';\r\nimport Messages from './Messages';\r\nimport './Messages.css'\r\n\r\n\r\nconst MessagesContainer: React.FC<MessagesContainerPropsType> = (props) => {\r\n\r\n    return (\r\n        <Messages usersList = {props.usersList} chatSMS = {props.chatSMS} addMessage = {props.addMessage} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MessagesContainerStatePropsType => {\r\n    return {\r\n        usersList: state.messagesData.usersList,\r\n        chatSMS: state.messagesData.chatSMS\r\n    }  \r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessage: messagesActions.addMessageActionCreator}),\r\n    WithAuthRedirect\r\n) (MessagesContainer) as React.ComponentType\r\n\r\n"],"sourceRoot":""}