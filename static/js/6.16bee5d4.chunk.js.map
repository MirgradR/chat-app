{"version":3,"sources":["utils/validator/validators.js","components/Common/FormsStyles/FormControls.jsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Content/Settings/SettingsForm/SettingsForm.jsx","components/Content/Settings/Settings.jsx","components/Content/Settings/SettingsContainer.jsx"],"names":["requeiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","Input","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","maxLength35","maxLength40","SettingsReduxForm","reduxForm","form","handleSubmit","contacts","onSubmit","Field","component","type","name","validate","Settings","initialValues","profileInfo","SettingsContainer","connect","state","isAuth","auth","profileData","saveProfile","saveProfileInfoThunkCreator","useState","editMode","setEditMode","onClick","formData","then","to"],"mappings":"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","file":"static/js/6.16bee5d4.chunk.js","sourcesContent":["\r\n\r\nexport const requeiredField = value => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    \r\n    if (value) {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength}`\r\n        }\r\n        return undefined\r\n    } else {\r\n        \r\n    }\r\n\r\n    \r\n}","import './FormControls.css'\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <textarea {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}\r\nexport const Input = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <input {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { Field, reduxForm } from \"redux-form\"\r\nimport { Input } from \"../../../Common/FormsStyles/FormControls\"\r\nimport '../../../Common/FormsStyles/FormControls.css'\r\nimport { maxLengthCreator, requeiredField } from '../../../../utils/validator/validators'\r\n\r\nconst maxLength35 = maxLengthCreator(35)\r\nconst maxLength40 = maxLengthCreator(40)\r\n\r\nconst SettingsForm = ({handleSubmit, error, contacts}) => {\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit} className = 'settings-form'>\r\n            <div className = {'form-personal'}>\r\n                <h3 className = {'form-personal__title'}>Personal:</h3>\r\n                <div className = {'form-personal__item checkbox'}>\r\n                    <p>Loking for a job: </p>\r\n                    <Field component={Input} type={'checkbox'} name={'lookingForAJob'} />\r\n                </div>\r\n                <div className = {'form-personal__item'}>\r\n                    <p>About me</p>\r\n                    <Field component={Input} name={'lookingForAJobDescription'} validate = {[requeiredField, maxLength40]}/>\r\n                </div>\r\n                <div className = {'form-personal__item'}>\r\n                    <p>Full Name</p>\r\n                    <Field component={Input} name={'fullName'} validate = {[requeiredField, maxLength35]}/>\r\n                </div> \r\n            </div>\r\n            <div className = {'form-contacts'}>\r\n                <h3 className={'form-contacts__title'}>Contacts:</h3>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>github</p>\r\n                    <Field component={Input} name={'contacts.github'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>vk</p>\r\n                    <Field component={Input} name={'contacts.vk'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>facebook</p>\r\n                    <Field component={Input} name={'contacts.facebook'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>instagram</p>\r\n                    <Field component={Input} name={'contacts.instagram'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>twitter</p>\r\n                    <Field component={Input} name={'contacts.twitter'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>website</p>\r\n                    <Field component={Input} name={'contacts.website'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>youtube</p>\r\n                    <Field component={Input} name={'contacts.youtube'} validate = {maxLength40}/>\r\n                </div>    \r\n            </div>\r\n            { error && <div className={'form-settings-error'}><p>{error}</p></div> }\r\n            <button className = 'btn-settings'>Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SettingsReduxForm = reduxForm({form: 'settings'}) (SettingsForm)","import { SettingsReduxForm } from \"./SettingsForm/SettingsForm\"\r\n\r\n\r\nconst Settings = (props) => {\r\n    \r\n    return (\r\n        <div className = {'settings-content content__settings'}>\r\n            <h3 className = {'settings-content__title'}>Settings for your account</h3>\r\n            <SettingsReduxForm initialValues = {props.profileInfo}  onSubmit = {props.onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings","import { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { saveProfileInfoThunkCreator } from '../../../redux/profile-reducer'\r\nimport Settings from './Settings'\r\nimport './Settings.css'\r\n\r\nconst SettingsContainerF = (props) => {\r\n    \r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const backToSettings = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(()=>{\r\n            setEditMode(true)\r\n        })\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to = {'/content/login'} />\r\n    }\r\n    if (editMode) {\r\n        return (\r\n            <div className = {'settings-succsess'}>\r\n                <h3 className = 'settings-succsess__title'>Succsess...</h3>\r\n                <button onClick = {backToSettings} className = {'settings-succsess__btn'}>Back to settings</button>\r\n            </div>           \r\n        )\r\n    }\r\n    return (\r\n        <Settings onSubmit = {onSubmit} profileInfo = {props.profileInfo} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        profileInfo: state.profileData.profileInfo,\r\n    }\r\n}\r\nconst SettingsContainer = connect(mapStateToProps, {saveProfile: saveProfileInfoThunkCreator}) (SettingsContainerF)\r\n\r\nexport default SettingsContainer"],"sourceRoot":""}