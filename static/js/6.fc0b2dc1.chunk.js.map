{"version":3,"sources":["utils/validator/validators.ts","components/Common/FormsStyles/FormControls.tsx","components/Content/Login/LoginForm/LoginForm.tsx","components/Content/Login/LoginContainer.tsx"],"names":["requeiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","Input","maxLength25","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","Field","placeholder","component","name","validate","type","src","alt","LoginContainer","connect","state","isAuth","auth","login","logout","to","formData","password","rememberMe","captcha"],"mappings":"kIAGA,oEAAO,IAAMA,EAAyC,SAACC,GACnD,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAA+C,SAACF,GAE5E,GAAIA,EACA,OAAIA,EAAMG,OAASD,EACT,iBAAN,OAAwBA,QAE5B,K,+KCbKE,EAAwC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,iBACxEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAcH,EAAW,qBAAuB,eAArD,UACI,oDAAcH,GAAWE,IACvBC,GAAY,sBAAMG,UAAa,gBAAnB,SAAsCL,EAAKI,YAIxDE,EAAqC,SAAC,GAA6B,IAA5BP,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,iBACrEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,sBAAKC,UAAcH,EAAW,qBAAuB,eAArD,UACI,iDAAWH,GAAWE,IACpBC,GAAY,sBAAMG,UAAa,gBAAnB,SAAsCL,EAAKI,a,yJCV/DG,EAAcZ,YAAiB,IAwBxBa,EAAiBC,YAAmD,CAACC,KAAM,SAA1DD,EAtBqF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcP,EAAuB,EAAvBA,MAAOQ,EAAgB,EAAhBA,WAEtI,OACI,uBAAMC,SAAYF,EAAcN,UAAY,aAA5C,UACI,cAACS,EAAA,EAAD,CAAOT,UAAY,oBAAoBU,YAAa,QAASC,UAAaV,IAAOW,KAAQ,QAASC,SAAY,CAACzB,IAAgBc,KAC/H,cAACO,EAAA,EAAD,CAAOT,UAAY,uBAAuBU,YAAa,WAAYC,UAAaV,IAAOW,KAAQ,WAAYE,KAAQ,WAAYD,SAAY,CAACzB,IAAgBc,KAC5J,sBAAKF,UAAY,kBAAjB,UACI,cAACS,EAAA,EAAD,CAAOT,UAAY,kCAAkCc,KAAM,WAAYH,UAAaV,IAAOW,KAAQ,eACnG,mBAAGZ,UAAY,+BAAf,4BAEFD,GAAS,qBAAKC,UAAW,mBAAhB,SAAoC,4BAAID,MAClDQ,GACG,sBAAKP,UAAW,qBAAhB,UACI,qBAAKe,IAAKR,EAAYS,IAAO,YAC7B,cAACP,EAAA,EAAD,CAAOT,UAAa,gBAAiBW,UAAaV,IAAOW,KAAQ,UAAWC,SAAY,CAACzB,UAGjG,wBAAQY,UAAY,YAApB,yBCGNiB,EAAiBC,aARC,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBb,WAAYY,EAAME,KAAKd,cAKiB,CAACe,MAAOA,IAAOC,OAAQA,KAAhDL,EArBiD,SAACtB,GAKrE,OAAIA,EAAMwB,OACC,cAAC,IAAD,CAAUI,GAAI,qBAGrB,cAACrB,EAAD,CAAgBK,SAPH,SAACiB,GACd7B,EAAM0B,MAAMG,EAASH,MAAOG,EAASC,SAAUD,EAASE,WAAYF,EAASG,UAMzCrB,WAAcX,EAAMW,gBAajDU","file":"static/js/6.fc0b2dc1.chunk.js","sourcesContent":["export type ValidatorsRequiredType = (value: string) => string | undefined\r\n\r\n\r\nexport const requeiredField: ValidatorsRequiredType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsRequiredType => (value: string) => {\r\n    \r\n    if (value) {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength}`\r\n        }\r\n        return undefined\r\n    } \r\n}","import { WrappedFieldProps } from 'redux-form'\r\nimport './FormControls.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <textarea {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <input {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}","import { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, requeiredField } from '../../../../utils/validator/validators'\r\nimport { Input } from '../../../Common/FormsStyles/FormControls'\r\nimport './LoginForm.css'\r\nimport '../../../Common/FormsStyles/FormControls.css'\r\nimport { LoginFormOwnProps, LoginFormValuesTypes } from '../../../../types/LoginTypes/LoginTypes'\r\n\r\nconst maxLength25 = maxLengthCreator(25)\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesTypes, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    \r\n    return (\r\n        <form onSubmit = {handleSubmit} className = 'login-form'>\r\n            <Field className = 'login-form__login' placeholder={'Login'} component = {Input} name = {'login'} validate = {[requeiredField, maxLength25]} />\r\n            <Field className = 'login-form__password' placeholder={'Password'} component = {Input} name = {'password'} type = {'password'} validate = {[requeiredField, maxLength25]} />\r\n            <div className = 'form-rememberMe'>\r\n                <Field className = 'login-form__rememberMe-checkbox' type={'checkbox'} component = {Input} name = {'rememberMe'} /> \r\n                <p className = 'login-form__rememberMe-title'>Remember me</p>\r\n            </div>\r\n            { error && <div className={'form-login-error'}><p>{error}</p></div> }\r\n            {captchaUrl &&\r\n                <div className={'form-login-captcha'}>\r\n                    <img src={captchaUrl} alt = {'captcha'} />\r\n                    <Field className = {'input-captcha'} component = {Input} name = {'captcha'} validate = {[requeiredField]}/>\r\n                </div>\r\n            }\r\n            <button className = 'btn-login'>Login</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesTypes, LoginFormOwnProps>({form: 'login'}) (LoginForm)","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { login, logout } from \"../../../redux/auth-reducer\"\r\nimport { AppStateType } from \"../../../redux/redux-store\"\r\nimport { LoginFormValuesTypes, LoginMapDispatchToProps, LoginMapStateToProps } from \"../../../types/LoginTypes/LoginTypes\"\r\nimport { LoginReduxForm } from \"./LoginForm/LoginForm\"\r\n\r\nconst Login: React.FC<LoginMapStateToProps & LoginMapDispatchToProps> = (props) => {\r\n\r\n    const onSubmit = (formData: LoginFormValuesTypes) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/content/profile'} />\r\n    }\r\n    return (\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl = {props.captchaUrl}/>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): LoginMapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\n\r\nconst LoginContainer = connect(mapStateToProps, {login: login, logout: logout} ) (Login)\r\nexport default LoginContainer "],"sourceRoot":""}