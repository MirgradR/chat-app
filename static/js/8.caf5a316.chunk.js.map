{"version":3,"sources":["utils/validator/validators.ts","components/Common/FormsStyles/FormControls.tsx","components/Content/Settings/SettingsForm/SettingsForm.tsx","components/Content/Settings/Settings.tsx","components/Content/Settings/SettingsContainer.tsx"],"names":["requeiredField","value","maxLengthCreator","maxLength","length","Textarea","input","meta","props","hasError","touched","error","className","Input","maxLength35","maxLength40","SettingsReduxForm","reduxForm","form","handleSubmit","initialValues","onSubmit","Field","component","type","name","validate","Settings","profileInfo","SettingsContainer","connect","state","isAuth","auth","profileData","saveProfile","saveProfileInfoThunkCreator","useState","editMode","setEditMode","onClick","formData","then","to"],"mappings":"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","file":"static/js/8.caf5a316.chunk.js","sourcesContent":["export type ValidatorsRequiredType = (value: string) => string | undefined\r\n\r\nexport const requeiredField: ValidatorsRequiredType = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsRequiredType => (value: string) => {   \r\n    if (value) {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength}`\r\n        }\r\n        return undefined\r\n    } \r\n}","import { WrappedFieldProps } from 'redux-form'\r\nimport './FormControls.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <textarea {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className = { hasError ? 'form-control error' : 'form-control'}>\r\n            <input {...input} {...props} />\r\n            { hasError && <span className = {'error-messege'} >{meta.error}</span>}  \r\n        </div>\r\n    )\r\n}","import { Field, InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { Input } from \"../../../Common/FormsStyles/FormControls\"\r\nimport '../../../Common/FormsStyles/FormControls.css'\r\nimport { maxLengthCreator, requeiredField } from '../../../../utils/validator/validators'\r\nimport { SettingFormValuesPropsType, SettingsFormOvnPropsType } from \"../../../../types/SettingsTypes/SettingTypesComponent\"\r\n\r\nconst maxLength35 = maxLengthCreator(35)\r\nconst maxLength40 = maxLengthCreator(40)\r\n\r\nconst SettingsForm: React.FC<InjectedFormProps<SettingFormValuesPropsType, SettingsFormOvnPropsType> & SettingsFormOvnPropsType> = ({handleSubmit, error, initialValues}) => {\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit} className = 'settings-form'>\r\n            <div className = {'form-personal'}>\r\n                <h3 className = {'form-personal__title'}>Personal:</h3>\r\n                <div className = {'form-personal__item checkbox'}>\r\n                    <p>Loking for a job: </p>\r\n                    <Field component={Input} type={'checkbox'} name={'lookingForAJob'} />\r\n                </div>\r\n                <div className = {'form-personal__item'}>\r\n                    <p>About me</p>\r\n                    <Field component={Input} name={'lookingForAJobDescription'} validate = {[requeiredField, maxLength40]}/>\r\n                </div>\r\n                <div className = {'form-personal__item'}>\r\n                    <p>Full Name</p>\r\n                    <Field component={Input} name={'fullName'} validate = {[requeiredField, maxLength35]}/>\r\n                </div> \r\n            </div>\r\n            <div className = {'form-contacts'}>\r\n                <h3 className={'form-contacts__title'}>Contacts:</h3>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>github</p>\r\n                    <Field component={Input} name={'contacts.github'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>vk</p>\r\n                    <Field component={Input} name={'contacts.vk'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>facebook</p>\r\n                    <Field component={Input} name={'contacts.facebook'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>instagram</p>\r\n                    <Field component={Input} name={'contacts.instagram'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>twitter</p>\r\n                    <Field component={Input} name={'contacts.twitter'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>website</p>\r\n                    <Field component={Input} name={'contacts.website'} validate = {maxLength40}/>\r\n                </div>\r\n                <div className={'form-contacts__item'}>\r\n                    <p>youtube</p>\r\n                    <Field component={Input} name={'contacts.youtube'} validate = {maxLength40}/>\r\n                </div>    \r\n            </div>\r\n            { error && <div className={'form-settings-error'}><p>{error}</p></div> }\r\n            <button className = 'btn-settings'>Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const SettingsReduxForm = reduxForm<SettingFormValuesPropsType, SettingsFormOvnPropsType>({form: 'settings'}) (SettingsForm)","\r\nimport { ProfileProfileInfoType } from \"../../../types/ProfileTypes/ProfileTypes\"\r\nimport { SettingsPropsType } from \"../../../types/SettingsTypes/SettingTypesComponent\"\r\nimport { SettingsReduxForm } from \"./SettingsForm/SettingsForm\"\r\n\r\n\r\nconst Settings: React.FC<SettingsPropsType> = (props) => {\r\n    \r\n    return (\r\n        <div className = {'settings-content content__settings'}>\r\n            <h3 className = {'settings-content__title'}>Settings for your account</h3>\r\n            <SettingsReduxForm initialValues = {props.profileInfo as ProfileProfileInfoType} onSubmit = {props.onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings\r\n","import { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router'\r\nimport { saveProfileInfoThunkCreator } from '../../../redux/profile-reducer'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\nimport { ProfileProfileInfoType } from '../../../types/ProfileTypes/ProfileTypes'\r\nimport { SettingsContainerPropsType, SettingsMapStatePropsType } from '../../../types/SettingsTypes/SettingTypesComponent'\r\nimport Settings from './Settings'\r\nimport './Settings.css'\r\n\r\nconst SettingsContainerF: React.FC<SettingsContainerPropsType> = (props) => {\r\n    \r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const backToSettings = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileProfileInfoType) => {\r\n        props.saveProfile(formData).then(()=>{\r\n            setEditMode(true)\r\n        })\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to = {'/content/login'} />\r\n    }\r\n    if (editMode) {\r\n        return (\r\n            <div className = {'settings-succsess'}>\r\n                <h3 className = 'settings-succsess__title'>Succsess...</h3>\r\n                <button onClick = {backToSettings} className = {'settings-succsess__btn'}>Back to settings</button>\r\n            </div>           \r\n        )\r\n    }\r\n    return (\r\n        <Settings onSubmit = {onSubmit} profileInfo = {props.profileInfo} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): SettingsMapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        profileInfo: state.profileData.profileInfo,\r\n    }\r\n}\r\nconst SettingsContainer = connect(mapStateToProps, {saveProfile: saveProfileInfoThunkCreator}) (SettingsContainerF)\r\n\r\nexport default SettingsContainer"],"sourceRoot":""}