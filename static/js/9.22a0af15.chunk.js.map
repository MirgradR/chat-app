{"version":3,"sources":["HOC/WithAuthRedirect.tsx","components/Content/Friends/FriendsItem/FriendsItem.tsx","components/Content/Friends/Pagination/Pagination.tsx","components/Content/Friends/FriendsFormSearch/FriendsFormSearch.tsx","components/Content/Friends/Friends.tsx","redux/friends-selectors.ts","components/Content/Friends/FriendsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","connect","props","restProps","to","FriendsItem","className","user","id","src","photos","small","avatar","alt","name","status","followed","disabled","followingProgress","some","onClick","unfollowUser","followUser","Pagination","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","currentPage","push","i","map","p","setCurrentPage","random","friendsFormValidate","values","FriendsFormSearch","initialValues","term","friend","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","type","as","value","Friends","users","getUsers","createSelector","friendsData","filter","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingProgress","getFilterFriends","compose","followUserThunkCreator","unFollowUserThunkCreator","friendsActions","setCurrentPageAC","toggleFollowingProgress","toggleFollowingProgressAC","getUsersThunkCreator","useEffect","Preloader"],"mappings":"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","file":"static/js/9.22a0af15.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router\"\r\nimport { AppStateType } from \"../redux/redux-store\"\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype WithAuthPropsType = {isAuth: boolean}\r\n\r\nexport function WithAuthRedirect<WCP> (Component: React.ComponentType<WCP>) { \r\n\r\n    const RedirectComponent: React.FC<WithAuthPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Redirect to='/Content/Login' />\r\n        }\r\n        return <Component {...restProps as unknown as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<WithAuthPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import './FriendsItem.css'\r\nimport avatar from './../../../../Rlogo.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport React from 'react'\r\nimport { FriendsItemPropsType } from '../../../../types/FriendsTypes/FriendsTypesComponent'\r\n\r\nconst FriendsItem: React.FC<FriendsItemPropsType> = (props) => {\r\n    \r\n    const followUser = () => {\r\n        props.followUser(props.user.id)\r\n    }\r\n\r\n    const unfollowUser = () => {\r\n        props.unfollowUser(props.user.id)\r\n    }\r\n\r\n    return (\r\n        <li className='friends__list-item'>\r\n            <NavLink to = {'/Content/Profile/' + props.user.id}>\r\n                <img src={props.user.photos.small ? props.user.photos.small : avatar} alt='avatar' className='logo avatar' />\r\n                <div className='list-item__description'>\r\n                    <h2 className='description-login'>{props.user.name}</h2>\r\n                    <div className = {'location'}></div>\r\n                    <p className='description-greeting'>{props.user.status}</p>\r\n                </div>\r\n            </NavLink>\r\n            {props.user.followed\r\n                    ? <button disabled = {props.followingProgress.some(id => id === props.user.id)} onClick={unfollowUser} className='list-item__following'>Unfollow</button>\r\n                    : <button disabled = {props.followingProgress.some(id => id === props.user.id)} onClick={followUser} className='list-item__following'>Follow</button>\r\n                }\r\n        </li>\r\n    )\r\n}\r\nexport default FriendsItem\r\n","\r\nexport type PaginationPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n}\r\n\r\nexport const Pagination: React.FC<PaginationPropsType> = (props) => {\r\n    let pagesCount: number = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages: Array<number> = []\r\n\r\n    if (props.currentPage > 1) {\r\n        pages.push(1)\r\n        if (props.currentPage > 2) {\r\n            pages.push(props.currentPage - 2)\r\n            if (props.currentPage > 3) {\r\n                pages.push(props.currentPage - 1)\r\n            }\r\n        }\r\n    }\r\n    for (let i = props.currentPage; i <= pagesCount; i++) {\r\n        if (i < 9) {\r\n            pages.push(i)  \r\n        }\r\n    }\r\n    if (props.currentPage >= 8) {\r\n        if (props.currentPage < pagesCount) {\r\n            if (props.currentPage !== 8) {\r\n                pages.push(props.currentPage)    \r\n            }\r\n            pages.push(props.currentPage + 1)\r\n        }   \r\n    }\r\n    if (props.currentPage !== pagesCount - 1) {\r\n        pages.push(pagesCount)\r\n    }\r\n    \r\n    return (\r\n        <div className='pagination-pages'>\r\n            {pages.map(p => {\r\n                return <button key = {Math.random()} className={props.currentPage === p\r\n                    ? 'pagination-pages__value selected'\r\n                    : 'pagination-pages__value'}\r\n                    onClick={() => { props.setCurrentPage(p) }} >\r\n                    {p}\r\n                </button>\r\n            })}\r\n        </div>\r\n    )\r\n}","import { Field, Form, Formik } from \"formik\"\r\nimport { FriendsFilterTermType } from \"../../../../types/FriendsTypes/FriendsTypes\"\r\n\r\nconst friendsFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\nconst FriendsFormSearch: React.FC<FriendsFormPropsType> = (props) => {\r\n\r\n    const submit = (values: FriendsFilterTermType, { setSubmitting }: FriendsFormSearchSetSubmittingType) => { \r\n        props.onFilterChanged(values)     \r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ term: '', friend: null }}\r\n            validate={friendsFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form className={'friends__form-search'}>\r\n                    <Field type=\"text\" name=\"term\" />\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">all</option>\r\n                        <option value=\"true\">My friends</option>\r\n                        <option value=\"false\">Not friends</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default FriendsFormSearch\r\n\r\nexport type FriendsSearchingFormType = {\r\n    searchingFriend: string\r\n}\r\nexport type FriendsFormSearchSetSubmittingType = {\r\n    setSubmitting:  (isSubmitting: boolean) => void\r\n}\r\nexport type FriendsFormPropsType = {\r\n    onFilterChanged: (filter: FriendsFilterTermType) => void\r\n}","import FriendsItem from \"./FriendsItem/FriendsItem\"\r\nimport './Friends.css'\r\nimport { Pagination } from \"./Pagination/Pagination\"\r\nimport { FriendsPropsType } from \"../../../types/FriendsTypes/FriendsTypesComponent\"\r\nimport FriendsFormSearch from \"./FriendsFormSearch/FriendsFormSearch\"\r\n\r\nconst Friends: React.FC<FriendsPropsType> = (props) => {\r\n    return (\r\n        <div className='friends content__friends'>\r\n            <FriendsFormSearch onFilterChanged = {props.onFilterChanged} />\r\n            <Pagination totalUsersCount={props.totalUsersCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                setCurrentPage={props.setCurrentPage}\r\n            />\r\n            <ul className='friends__list'>\r\n                {props.users.map(user => {\r\n                    return <FriendsItem user={user}\r\n                        followUser={props.followUser}\r\n                        unfollowUser={props.unfollowUser}\r\n                        key={user.id}\r\n                        followingProgress={props.followingProgress} />\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Friends\r\n","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.friendsData.users\r\n}\r\n\r\nexport const getUsers = createSelector( getUsersSelector, (users)  => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.friendsData.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.friendsData.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.friendsData.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.friendsData.isFetching\r\n}\r\nexport const getFollowingProgress = (state: AppStateType) => {\r\n    return state.friendsData.followingProgress\r\n}\r\nexport const getFilterFriends = (state: AppStateType) => {\r\n    return state.friendsData.filter\r\n}\r\n\r\n","import { connect } from \"react-redux\";\r\nimport { followUserThunkCreator, friendsActions, getUsersThunkCreator, unFollowUserThunkCreator } from \"../../../redux/friends-reducer\";\r\nimport React, { useEffect } from 'react'\r\nimport Friends from './Friends'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport { WithAuthRedirect } from \"../../../HOC/WithAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { getCurrentPage, getFilterFriends, getFollowingProgress, getIsFetching, getPageSize, getTotalUsersCount, getUsers } from \"../../../redux/friends-selectors\";\r\nimport { FriendsContainerPropsType, FriendsContainerStatePropsType } from \"../../../types/FriendsTypes/FriendsTypesComponent\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { FriendsFilterTermType } from \"../../../types/FriendsTypes/FriendsTypes\";\r\n\r\nconst FriendsContainer: React.FC<FriendsContainerPropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getUsers(props.currentPage, props.pageSize, props.filter)\r\n    }, [])\r\n\r\n    const setCurrentPage = (p: number) => {\r\n        props.setCurrentPage(p)\r\n        props.getUsers(p, props.pageSize, props.filter)\r\n    }\r\n\r\n    const onFilterChanged = (filter: FriendsFilterTermType) => {\r\n        props.getUsers(1, props.pageSize, filter)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.isFetching ? <Preloader /> : <Friends\r\n                totalUsersCount={props.totalUsersCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                users={props.users}\r\n                followUser={props.followUser}\r\n                unfollowUser={props.unfollowUser}\r\n                followingProgress={props.followingProgress}\r\n                onFilterChanged = {onFilterChanged} />}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): FriendsContainerStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingProgress: getFollowingProgress(state),\r\n        filter: getFilterFriends(state)\r\n    }\r\n}\r\n\r\nexport default compose (\r\n    connect (mapStateToProps, {\r\n        followUser: followUserThunkCreator,\r\n        unfollowUser: unFollowUserThunkCreator,\r\n        setCurrentPage: friendsActions.setCurrentPageAC,\r\n        toggleFollowingProgress: friendsActions.toggleFollowingProgressAC,\r\n        getUsers: getUsersThunkCreator\r\n        }),\r\n    WithAuthRedirect\r\n) (FriendsContainer) as React.ComponentType\r\n"],"sourceRoot":""}