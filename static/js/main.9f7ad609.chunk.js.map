{"version":3,"sources":["types/APITypes/ApiTypes.ts","preloader.gif","components/Common/Preloader/Preloader.js","redux/auth-reducer.ts","reportWebVitals.js","components/Content/Content.jsx","components/Navigation/MenuItem/MenuItem.jsx","components/MenuBurger/MenuBurger.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","components/Navigation/Navigation.jsx","components/Navigation/NavigationContainer.jsx","redux/app-initial-reducer.ts","redux/navigation-reducer.ts","redux/redux-store.ts","App.js","index.js","Rlogo.png","redux/profile-reducer.ts","redux/messages-reducer.ts","redux/friends-reducer.ts","api/api.ts"],"names":["ResultCodesEnum","Preloader","props","src","preloader","className","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","data","authActions","setUserData","dispatch","a","authAPI","getProfileAuth","userInfo","resultCode","Success","id","password","rememberMe","captcha","loginAuth","CaptchaIsRequired","getCaptchaUrl","messageError","messages","length","stopSubmit","_error","securityAPI","url","logout","logoutAuth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LoginContainer","React","lazy","FriendsContainer","ProfileContainer","MessagesContainer","SettingsContainer","Content","exact","path","render","to","Suspense","fallback","MenuItem","link","item","MenuBurger","menuList","navigation","map","elem","Header","useState","activeMenu","setActiveMenu","onClick","logo","alt","auth","HeaderContainer","this","Component","connect","Navigation","NavigationContainer","initialized","appInitialActions","reducers","combineReducers","profileData","profileReducer","messagesData","messagesReducer","friendsData","friendsReducer","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","App","initialize","AppContainer","AppMain","basename","process","ReactDOM","document","getElementById","postUsers","post","likes","name","profileInfo","isFetching","status","newPost","photos","photo","profileActions","addPostActionCreator","setProfileInfoAC","getProfileStatusAC","updatePhotoActionCreator","setProfileInfoThunkCreator","userID","myProfile","showUserByID","profileAPI","getProfileInfo","getProfileStatusThunkCreator","getStatus","updateProfileStatusThunkCreator","updateStatus","savePhotoThunkCreator","file","savePhoto","saveProfileInfoThunkCreator","newProfile","getState","saveProfileInfo","Promise","reject","usersList","chatSMS","text","newMessage","messagesActions","addMessageActionCreator","users","pageSize","totalUsersCount","currentPage","followingProgress","updateObjectInArray","items","itemID","objPropName","newObjProps","u","followed","totalCount","filter","friendsActions","followAC","unfollowAC","setUsersAC","setCurrentPageAC","setTotalUsersCountAC","toggleIsFetchingCountAC","toggleFollowingProgressAC","_followUnfollow","actionCreator","apiMethon","getUsersThunkCreator","friendsAPI","getUsers","followUserThunkCreator","followUser","bind","unFollowUserThunkCreator","unFollowUser","instance","axios","create","withCredentials","baseURL","headers","delete","get","put","formData","FormData","append","aboutMe","fullName","JSON","stringify"],"mappings":"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","file":"static/js/main.9f7ad609.chunk.js","sourcesContent":["import { ProfileProfileInfoPhotosType } from \"../ProfileTypes/ProfileTypes\"\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    data: D\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\n//Friends\r\nexport type FriendsUsersType = {\r\n    name: string,\r\n    id: number,\r\n    photos: ProfileProfileInfoPhotosType,\r\n    status: string,\r\n    followed: boolean\r\n}\r\nexport type FriendsApiGetUsersResponseType = {\r\n    items: Array<FriendsUsersType>\r\n    totalCount: number,\r\n    error: null | string\r\n}\r\n\r\n//Auth\r\n\r\nexport type AuthDataType = {\r\n    id: number,\r\n    email: string, \r\n    login: string\r\n}\r\nexport type AuthLoginDataType = {\r\n    userId: number\r\n}\r\n\r\n//Profile\r\n\r\nexport type PhotosFromApi = {\r\n    photos: ProfileProfileInfoPhotosType\r\n}\r\n\r\n// Security\r\n\r\nexport type GetCaptchaApiResponseType = {\r\n    url: string\r\n}","export default __webpack_public_path__ + \"static/media/preloader.bf7cf191.gif\";","import preloader from './../../../preloader.gif'\r\n\r\nconst Preloader = (props) => {\r\n    return <img src = {preloader} className = 'preloader' />\r\n}\r\nexport default Preloader","import { FormAction, stopSubmit } from \"redux-form\"\r\nimport { authAPI, securityAPI } from \"../api/api\"\r\nimport { ResultCodesEnum } from \"../types/APITypes/ApiTypes\"\r\nimport { AuthActionTypes, InitialStateAuthType } from \"../types/AuthTypes/AuthTypes\"\r\nimport { ThunkType } from \"../types/commonTypes\"\r\n\r\nlet initialState: InitialStateAuthType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionTypes) => {\r\n    switch(action.type) {\r\n        case 'AUTH/SET-USER-DATA':\r\n            return {\r\n                ...state, \r\n                ...action.data\r\n            }\r\n        case 'AUTH/GET-CAPTCHA-URL-SUCCSESS':\r\n            return {\r\n                ...state, captchaUrl: action.captchaUrl\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authActions = {\r\n    setUserDataAC: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n        return {\r\n            type: 'AUTH/SET-USER-DATA',\r\n            data: { userId, email, login, isAuth }\r\n        } as const\r\n    },\r\n    getCaptchaUrlActionCreator: (captchaUrl: string) => {\r\n        return {\r\n            type: 'AUTH/GET-CAPTCHA-URL-SUCCSESS',\r\n            captchaUrl: captchaUrl\r\n        } as const\r\n    }\r\n}\r\n\r\nexport const setUserData = (): ThunkType<AuthActionTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.getProfileAuth()\r\n        const userInfo = data.data\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(authActions.setUserDataAC(userInfo.id, userInfo.email, userInfo.login, true))\r\n        }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: null | string): ThunkType<AuthActionTypes | FormAction> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.loginAuth(email, password, rememberMe, captcha)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setUserData())\r\n        } else {\r\n            if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\r\n               dispatch(getCaptchaUrl()) \r\n            }\r\n            let messageError = data.messages.length > 0 ? data.messages[0] : 'The Login or Password is incorrect'\r\n            dispatch(stopSubmit('login', { _error: messageError }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType<AuthActionTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = data.data.url\r\n        dispatch(authActions.getCaptchaUrlActionCreator(captchaUrl))\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType<AuthActionTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await authAPI.logoutAuth()\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(authActions.setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Redirect, Route } from 'react-router';\r\nimport './Content.css'\r\nimport React from 'react';\r\nimport Preloader from '../Common/Preloader/Preloader';\r\n\r\nconst LoginContainer = React.lazy(() => import('./Login/LoginContainer') )\r\nconst FriendsContainer = React.lazy(() => import('./Friends/FriendsContainer') )\r\nconst ProfileContainer = React.lazy(() => import('./Profile/ProfileContainer') )\r\nconst MessagesContainer = React.lazy(() => import('./Messages/MessagesContainer') )\r\nconst SettingsContainer = React.lazy(() => import('./Settings/SettingsContainer') )\r\n\r\nconst Content = (props) => {\r\n    return (\r\n        <div className=\"content wrapper__content\">\r\n            <Route exact\r\n                path='/'\r\n                render={() => {\r\n                    return <Redirect to = {'/content/profile'} />\r\n                }}\r\n            />\r\n            <Route\r\n                path='/Content/Profile/:userId?'\r\n                render={() => {\r\n                    return <React.Suspense fallback={<div><Preloader/></div>}>\r\n                        <ProfileContainer />\r\n                    </React.Suspense>\r\n                }}\r\n            />\r\n            <Route\r\n                path='/Content/Messages'\r\n                render={() => {\r\n                    return <React.Suspense fallback={<div><Preloader/></div>}>\r\n                        <MessagesContainer />\r\n                    </React.Suspense>\r\n                }}\r\n            />\r\n            <Route\r\n                path='/Content/Friends'\r\n                render={() => {\r\n                    return <React.Suspense fallback={<div><Preloader /></div>}>\r\n                        <FriendsContainer />\r\n                    </React.Suspense>\r\n                }}\r\n            />\r\n            <Route\r\n                path='/Content/Login'\r\n                render={() => {\r\n                    return <React.Suspense fallback={<div><Preloader /></div>}>\r\n                        <LoginContainer />\r\n                    </React.Suspense>\r\n                }}\r\n            />\r\n            <Route\r\n                path='/Content/Settings'\r\n                render={() => {\r\n                    return <React.Suspense fallback={<div><Preloader /></div>}>\r\n                        <SettingsContainer />\r\n                    </React.Suspense>\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default Content","import { NavLink } from 'react-router-dom';\r\nimport './MenuItem.css'\r\n\r\nconst MenuItem = (props) => {\r\n    return (\r\n        <NavLink to = {props.link} className = \"menu-item sidebar__item\">{props.item}</NavLink>\r\n    );\r\n}\r\nexport default MenuItem","import MenuItem from \"../Navigation/MenuItem/MenuItem\"\r\nimport './MenuBurger.css'\r\n\r\nconst MenuBurger = (props) => {\r\n    const menuList = props.navigation.map(elem => {\r\n        return <MenuItem item = {elem} link = {'/Content/' + elem} key = {elem}/>\r\n    })\r\n    return (\r\n        <div className = {'sidebar-menu'} >\r\n            {menuList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuBurger","import { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../Rlogo.png'\r\nimport MenuBurger from '../MenuBurger/MenuBurger';\r\nimport './Header.css'\r\n\r\n\r\nconst Header = (props) => {\r\n    \r\n    const [activeMenu, setActiveMenu] = useState(false)\r\n\r\n    const setActive = () => {\r\n        setActiveMenu(!activeMenu)\r\n    }\r\n    \r\n    return (\r\n        <header className=\"header wrapper__header\">\r\n            <div onClick = {setActive} className = {activeMenu ? 'burger-menu active' : 'burger-menu'}>\r\n                <div className = {'burger-menu__item'}></div>\r\n            </div>\r\n            {activeMenu && <MenuBurger navigation = {props.navigation}/>}\r\n            <img className=\"logo header__logo\" src={logo} alt=\"logo\" />\r\n            {props.auth.isAuth \r\n            ? <div><span className = {'header__login-login'}>{props.auth.login}</span> <span onClick = {props.logout} className = {'header__login-logout'}>&#10060;</span></div> \r\n            : <NavLink to = '/Content/Login/' className = 'header__login-userName'>{'Login'}</NavLink>}\r\n            \r\n        </header>\r\n    );\r\n}\r\nexport default Header","import React from 'react'\r\nimport './Header.css'\r\nimport Header from './Header'\r\nimport { connect } from 'react-redux'\r\nimport { logout, setUserData} from '../../redux/auth-reducer'\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n        this.props.setUserData(this.props.auth.isAuth)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header auth = {this.props.auth} logout = {this.props.logout} navigation = {this.props.navigation} />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    navigation: state.navigation.navigation\r\n})\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {setUserData: setUserData, logout: logout}) (HeaderContainer)\r\n","import MenuItem from './MenuItem/MenuItem';\r\nimport './Navigation.css'\r\n\r\nconst Navigation = (props) => {\r\n    const menuList = props.navigation.map(elem => {\r\n        return <MenuItem item = {elem} link = {'/Content/' + elem} key = {elem}/>\r\n    })\r\n    \r\n    return (\r\n        <nav className=\"sidebar wrapper__sidebar\">\r\n            {menuList}\r\n        </nav>\r\n    );\r\n}\r\nexport default Navigation","import { connect } from 'react-redux'\r\nimport Navigation from './Navigation'\r\nimport './Navigation.css'\r\n\r\nconst mapPropsToState = (state) => {\r\n    return {\r\n        navigation: state.navigation.navigation\r\n    }\r\n}\r\n\r\nconst NavigationContainer = connect(mapPropsToState, null) (Navigation)\r\n\r\nexport default NavigationContainer","import { AppActionsTypes, InitialStateInitializedType } from \"../types/AppTypes/AppTypes\"\r\nimport { ThunkType } from \"../types/commonTypes\"\r\nimport { setUserData } from \"./auth-reducer\"\r\n\r\nlet initialState: InitialStateInitializedType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const initializedReducer = (state = initialState, action: AppActionsTypes) => {\r\n    switch(action.type) {\r\n        case 'SET-INITIALIZED':\r\n            return {\r\n                ...state, \r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const appInitialActions = {\r\n    initializedSuccessAC: () => {\r\n        return {\r\n            type: 'SET-INITIALIZED',\r\n        } as const\r\n    }\r\n}\r\n\r\nexport const initializeThunkCreator = (): ThunkType<AppActionsTypes> => {\r\n    return async (dispatch) => {\r\n        await dispatch(setUserData())\r\n        dispatch(appInitialActions.initializedSuccessAC())             \r\n    }\r\n}\r\n","import { InitialStateNavigationType } from \"../types/NavigationTypes/NavigationTypes\"\r\n\r\nlet initialState: InitialStateNavigationType = {\r\n    navigation: ['Profile', 'Messages', 'Friends', 'Settings']\r\n}\r\n\r\nexport const navigationReducer = (state = initialState, action: any): InitialStateNavigationType => {\r\n    return state\r\n}","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport {profileReducer} from './profile-reducer'\r\nimport {messagesReducer} from './messages-reducer'\r\nimport {navigationReducer} from './navigation-reducer'\r\nimport { friendsReducer } from \"./friends-reducer\";\r\nimport { authReducer } from \"./auth-reducer\";\r\nimport thunkMiddleware  from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport { initializedReducer } from \"./app-initial-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profileData: profileReducer,\r\n    messagesData: messagesReducer,\r\n    navigation: navigationReducer,\r\n    friendsData: friendsReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: initializedReducer\r\n})\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom'; \nimport './App.css';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport Content from './components/Content/Content';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport NavigationContainer from './components/Navigation/NavigationContainer';\nimport { initializeThunkCreator } from './redux/app-initial-reducer';\nimport store from './redux/redux-store';\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.initialize()\n  }\n  \n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    return (\n      <div className=\"wrapper\">\n        <HeaderContainer />\n        <NavigationContainer />\n        <Content />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  initialized: state.app.initialized\n})\n\nlet AppContainer = connect(mapStateToProps, { initialize: initializeThunkCreator })(App)\n\nconst AppMain = (props) => {\n  return (\n    <BrowserRouter basename = {process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </BrowserRouter>\n  )\n}\nexport default AppMain\n\n","import reportWebVitals from './reportWebVitals';\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport  AppMain  from \"./App\";\nimport './index.css';\n\nReactDOM.render( <AppMain />, document.getElementById('root') );\n\nreportWebVitals();\n\n\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/Rlogo.fa290132.png\";","import { FormAction, stopSubmit } from \"redux-form\"\r\nimport { profileAPI } from \"../api/api\"\r\nimport { ResultCodesEnum } from \"../types/APITypes/ApiTypes\";\r\nimport { ThunkType } from \"../types/commonTypes\";\r\nimport { InitialStateProfileType, ProfileActionsTypes, ProfileProfileInfoPhotosType, ProfileProfileInfoType } from '../types/ProfileTypes/ProfileTypes';\r\n\r\nlet initialState: InitialStateProfileType = {\r\n    postUsers: [\r\n        { post: 'Hi girls', id: 1, likes: 23, name: 'Jenya' },\r\n        { post: 'wow man', id: 2, likes: 12, name: 'Jorik' },\r\n        { post: 'How are you', id: 3, likes: 5, name: 'Roma' },\r\n        { post: 'Haha', id: 4, likes: 8, name: 'Masha' },\r\n        { post: 'Haha', id: 5, likes: 3, name: 'Igor' }\r\n    ],\r\n    profileInfo: null,\r\n    isFetching: false,\r\n    status: ''\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST': \r\n            let newPost = action.newPost\r\n            return {\r\n                ...state,\r\n                postUsers: [...state.postUsers, {post: newPost, id: 6, likes: 0, name: 'Ruslan'}]\r\n            }\r\n        case 'PROFILE/SET-PROFILE-INFO':\r\n            return {\r\n                ...state, profileInfo: action.profileInfo\r\n            }\r\n        case 'PROFILE/GET-STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case 'PROFILE/UPDATE-PHOTO':\r\n            return {\r\n                ...state, profileInfo: {...state.profileInfo, photos: action.photo}\r\n            }\r\n        default: \r\n            return state \r\n    }\r\n}\r\n\r\nexport const profileActions = {\r\n    addPostActionCreator: (newPost: string) => {\r\n        return {\r\n            type: 'PROFILE/ADD-POST',\r\n            newPost: newPost\r\n        } as const\r\n    },\r\n    setProfileInfoAC: (profileInfo: ProfileProfileInfoType) => {\r\n        return {\r\n            type: 'PROFILE/SET-PROFILE-INFO',\r\n            profileInfo: profileInfo,\r\n        } as const\r\n    },\r\n    getProfileStatusAC: (status: string) => {\r\n        return {\r\n            type: 'PROFILE/GET-STATUS',\r\n            status: status\r\n        } as const\r\n    },\r\n    updatePhotoActionCreator: (photo: ProfileProfileInfoPhotosType) => {\r\n        return {\r\n            type: 'PROFILE/UPDATE-PHOTO',\r\n            photo: photo\r\n        } as const\r\n    },\r\n}\r\n\r\nexport const setProfileInfoThunkCreator = (userID: number | null, myProfile: number): ThunkType<ProfileActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let showUserByID = userID\r\n        if (!showUserByID) {\r\n            showUserByID = myProfile\r\n        }\r\n        let data:any = await profileAPI.getProfileInfo(showUserByID)\r\n        dispatch(profileActions.setProfileInfoAC(data.data)) \r\n    }\r\n}\r\n\r\nexport const getProfileStatusThunkCreator = (userID: number, myProfile: number): ThunkType<ProfileActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let showUserByID = userID\r\n        if (!showUserByID) {\r\n            showUserByID = myProfile\r\n        }\r\n        let data = await profileAPI.getStatus(showUserByID)\r\n        dispatch(profileActions.getProfileStatusAC(data))\r\n    }\r\n}\r\nexport const updateProfileStatusThunkCreator = (status: string): ThunkType<ProfileActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.updateStatus(status)\r\n        if (data.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(profileActions.getProfileStatusAC(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhotoThunkCreator = (file: File): ThunkType<ProfileActionsTypes> => {\r\n    return async (dispatch) => {\r\n        let data = await profileAPI.savePhoto(file)\r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(profileActions.updatePhotoActionCreator(data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfileInfoThunkCreator = (newProfile: ProfileProfileInfoType): ThunkType<ProfileActionsTypes | FormAction> => {\r\n    return async (dispatch, getState) => {\r\n        const userID = getState().auth.userId\r\n        let data = await profileAPI.saveProfileInfo(newProfile)\r\n        \r\n        if (data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(setProfileInfoThunkCreator(userID, 0))\r\n        } else {\r\n            let messageError = data.messages.length > 0 ? data.messages[0] : 'error'\r\n            dispatch(stopSubmit('settings', { _error: messageError }))  \r\n            return Promise.reject(messageError)      \r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { InitialStateMessagesType, MessagesActionsTypes } from \"../types/MessagesTypes/MessagesTypes\"\r\n\r\nlet initialState: InitialStateMessagesType = {\r\n    usersList: [\r\n        { name: 'Alex', id: 1 },\r\n        { name: 'Jenya', id: 2 },\r\n        { name: 'Jorik', id: 3 },\r\n        { name: 'Roma', id: 4 },\r\n        { name: 'Nikita', id: 5 },\r\n        { name: 'Masha', id: 6 },\r\n        { name: 'Kate', id: 7 }\r\n    ],\r\n    chatSMS: [\r\n        { text: 'Hi', id: 1 },\r\n        { text: 'Good', id: 2 },\r\n        { text: 'How are you', id: 3 },\r\n        { text: 'Haha', id: 4 },   \r\n    ],\r\n}\r\n\r\nexport const messagesReducer = (state = initialState, action: MessagesActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'MESSAGES/ADD-MESSAGE': \r\n            let newMessage = action.newMessage\r\n            return {\r\n                ...state,\r\n                chatSMS: [...state.chatSMS, {text: newMessage, id: 6}]\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const messagesActions = {\r\n    addMessageActionCreator: (newMessage: string) => {\r\n        return {\r\n            type: 'MESSAGES/ADD-MESSAGE',\r\n            newMessage: newMessage\r\n        } as const\r\n    }\r\n}\r\n","import { ResultCodesEnum } from './../types/APITypes/ApiTypes';\r\nimport { Dispatch } from \"react\"\r\nimport { friendsAPI} from \"../api/api\"\r\nimport { ThunkType } from \"../types/commonTypes\";\r\nimport { FriendsActionTypes, FriendsUsersType, InitialStateFriendsType } from \"../types/FriendsTypes/FriendsTypes\"\r\n\r\nlet initialState: InitialStateFriendsType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: []\r\n};\r\n\r\nconst updateObjectInArray = (items: Array<FriendsUsersType>, itemID: number, objPropName: string, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemID) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}\r\n\r\nexport const friendsReducer = (state = initialState, action: FriendsActionTypes) => {   \r\n    switch (action.type) {\r\n        case 'FRIENDS/FOLLOW':\r\n            return {\r\n                ...state, \r\n                users: updateObjectInArray(state.users, action.id, 'id', {followed: true})\r\n            }\r\n        case 'FRIENDS/UNFOLLOW':\r\n            return {\r\n                ...state, \r\n                users: updateObjectInArray(state.users, action.id, 'id', {followed: false})\r\n            }\r\n        case 'FRIENDS/SET-USERS':\r\n            return {...state, users:  [...action.users]}\r\n        case 'FRIENDS/SET-CURRENT-PAGE':\r\n            return {...state, currentPage: action.currentPage} \r\n        case 'FRIENDS/SET-TOTAL-USERS-COUNT':\r\n            return { ...state, totalUsersCount: action.totalCount }\r\n        case 'FRIENDS/TOGGLE-IS-FETCHING':\r\n            return { ...state, isFetching: action.isFetching }\r\n        case 'FRIENDS/FOLLOWING-PROGRESS': \r\n            return {...state, \r\n                followingProgress: action.followingProgress\r\n                    ? [...state.followingProgress, action.userID]\r\n                    : state.followingProgress.filter(id => id !== action.userID)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const friendsActions = {\r\n    followAC: (id: number) => {\r\n        return {\r\n            type: 'FRIENDS/FOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    unfollowAC: (id: number) => {\r\n        return {\r\n            type: 'FRIENDS/UNFOLLOW',\r\n            id: id\r\n        } as const\r\n    },\r\n    setUsersAC: (users: Array<FriendsUsersType>) => {\r\n        return {\r\n            type: 'FRIENDS/SET-USERS',\r\n            users: users\r\n        } as const\r\n    },\r\n    setCurrentPageAC: (currentPage: number) => {\r\n        return {\r\n            type: 'FRIENDS/SET-CURRENT-PAGE',\r\n            currentPage: currentPage\r\n        } as const\r\n    },\r\n    setTotalUsersCountAC: (totalCount: number) => {\r\n        return {\r\n            type: 'FRIENDS/SET-TOTAL-USERS-COUNT' ,\r\n            totalCount: totalCount\r\n        } as const\r\n    },\r\n    toggleIsFetchingCountAC: (isFetching: boolean) => {\r\n        return {\r\n            type: 'FRIENDS/TOGGLE-IS-FETCHING',\r\n            isFetching: isFetching\r\n        } as const\r\n    },\r\n    toggleFollowingProgressAC: (followingProgress: any, userID: number) => {\r\n        return {\r\n            type: 'FRIENDS/FOLLOWING-PROGRESS',\r\n            followingProgress: followingProgress,\r\n            userID: userID\r\n        } as const\r\n    },\r\n}\r\n\r\nconst _followUnfollow = async (dispatch: Dispatch<FriendsActionTypes>, userID: number, actionCreator: (userId: number) => FriendsActionTypes, apiMethon: any) => {\r\n    dispatch(friendsActions.toggleFollowingProgressAC(true, userID))\r\n    let data = await apiMethon(userID)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userID))\r\n    }\r\n    dispatch(friendsActions.toggleFollowingProgressAC(false, userID))\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number): ThunkType<FriendsActionTypes> => {\r\n    return async (dispatch) => {\r\n        dispatch(friendsActions.toggleIsFetchingCountAC(true))\r\n        let data = await friendsAPI.getUsers(currentPage, pageSize)\r\n        dispatch(friendsActions.toggleIsFetchingCountAC(false))\r\n        dispatch(friendsActions.setUsersAC(data.items))\r\n        dispatch(friendsActions.setTotalUsersCountAC(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const followUserThunkCreator = (userID: number): ThunkType<FriendsActionTypes> => {\r\n    return async (dispatch): Promise<void> => {\r\n        _followUnfollow(dispatch, userID, friendsActions.followAC, friendsAPI.followUser.bind(friendsAPI))\r\n    }\r\n}\r\n\r\nexport const unFollowUserThunkCreator = (userID: number): ThunkType<FriendsActionTypes> => {\r\n    return async (dispatch): Promise<void> => {\r\n        _followUnfollow(dispatch, userID, friendsActions.unfollowAC, friendsAPI.unFollowUser.bind(friendsAPI))\r\n    }\r\n}\r\n\r\n\r\n\r\n","import axios from \"axios\";\r\nimport {  AuthDataType, AuthLoginDataType, FriendsApiGetUsersResponseType, GetCaptchaApiResponseType, PhotosFromApi, ResponseType } from \"../types/APITypes/ApiTypes\";\r\nimport { ProfileProfileInfoType } from \"../types/ProfileTypes/ProfileTypes\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'e936cc93-ffd1-4fe3-841e-539754d0802a'\r\n    }\r\n})\r\n\r\nexport const friendsAPI = {\r\n    followUser(userID: number) {\r\n        return instance.post<ResponseType>(`follow/${userID}`, null).then(data => data.data)\r\n    },\r\n    unFollowUser(userID: number) {\r\n        return instance.delete<ResponseType>(`follow/${userID}`).then(data => data.data)\r\n    },\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<FriendsApiGetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`).then(data => data.data)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    loginAuth (email: string, password: string, rememberMe = false, captcha: null | string = null ) {\r\n        return instance.post<ResponseType<AuthLoginDataType>>(`auth/login`, { email, password, rememberMe, captcha }).then(data => data.data)\r\n    },\r\n    logoutAuth () {\r\n        return instance.delete<ResponseType>(`auth/login`).then(data => data.data)\r\n    },\r\n    getProfileAuth () {\r\n        return instance.get<ResponseType<AuthDataType>>(`auth/me`).then(data => data.data)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileInfo(userID: number) {\r\n        return instance.get<ResponseType<ProfileProfileInfoType>>(`profile/` + userID)//.then(data =>  data) //.data\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`profile/status/` + userID).then(data => data.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, {status: status}).then(data => data)\r\n    },\r\n    savePhoto(file: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put<ResponseType<PhotosFromApi>>('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(data => data.data)\r\n    },\r\n    saveProfileInfo(newProfile: ProfileProfileInfoType) {\r\n        newProfile.aboutMe = newProfile.fullName\r\n        const formData = JSON.stringify(newProfile)\r\n        return instance.put<ResponseType>(`profile`, formData, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(data => data.data)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaApiResponseType>('security/get-captcha-url')\r\n    }\r\n}\r\n"],"sourceRoot":""}